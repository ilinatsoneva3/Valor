@page "/quotes"
@attribute [Authorize]

@using IT.Valor.Client.Components
@using IT.Valor.Common.Models
@using IT.Valor.Common.Models.Quote

@inject IApiClient Client

<div class="font-italic">
    <div>
        <button type="button" class="btn btn-primary float-right" @onclick="ShowInputForm">Add new</button>
        <br />
        <br />
        <br />

        @if (showInput)
        {
            <CascadingValue Value="this"><QuoteComponent @bind-ShowArea="showInput" /></CascadingValue>
        }
    </div>
    <SearchComponent OnSearchChanged="SearchChanged"></SearchComponent>

    @if (Response.Items.Any())
    {
        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Quote</th>
                        <th scope="col">Author Name</th>
                        <th scope="col">Book Title</th>
                        <th scope="col">Date Added</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Response.Items.Any())
                    {
                        @foreach (var quote in Response.Items)
                        {
                            <QuoteRowComponent Quote="@quote"></QuoteRowComponent>
                        }
                    }
                </tbody>
            </table>
            <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center">
                    <li class="page-item">
                        <a class="page-link" @onclick="GetPrevious">Previous</a>
                    </li>
                    <li class="page-item"><a class="page-link">@Response.CurrentPage</a></li>
                    <li class="page-item">
                        <a class="page-link" @onclick="GetNext">Next</a>
                    </li>
                </ul>
            </nav>
        </div>
    }
    else
    {
        <p> Loading... </p>
    }

</div>

@code{
    private bool showInput = false;

    private PageParameters queryParams = new PageParameters();

    [Parameter]
    public PaginatedResult<QuoteDto> Response { get; set; } = new PaginatedResult<QuoteDto>();

    public async Task RerenderTable()
    {
        await LoadQuotes();
        StateHasChanged();
    }

    public async Task GetNext()
    {
        if (Response.HasNext)
        {
            queryParams.PageNumber++;
            await LoadQuotes();
            StateHasChanged();
        }
    }

    public async Task GetPrevious()
    {
        if (Response.HasPrevious)
        {
            queryParams.PageNumber--;
            await LoadQuotes();
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadQuotes();
    }

    private async Task LoadQuotes()
    {
        var result = await Client.GetForUserAsync(queryParams);
        Response = result;
    }

    private void ShowInputForm()
    {
        showInput = !showInput;
    }

    private async Task SearchChanged(string searchTerm)
    {
        queryParams.SearchTerm = searchTerm;
        await LoadQuotes();
        StateHasChanged();
    }
}